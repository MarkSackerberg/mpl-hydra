/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi-core';

export type FanoutMembershipMintVoucher =
  Account<FanoutMembershipMintVoucherAccountData>;

export type FanoutMembershipMintVoucherAccountData = {
  discriminator: Array<number>;
  fanout: PublicKey;
  fanoutMint: PublicKey;
  lastInflow: bigint;
  bumpSeed: number;
};

export type FanoutMembershipMintVoucherAccountArgs = {
  fanout: PublicKey;
  fanoutMint: PublicKey;
  lastInflow: number | bigint;
  bumpSeed: number;
};

export async function fetchFanoutMembershipMintVoucher(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipMintVoucher> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'FanoutMembershipMintVoucher');
  return deserializeFanoutMembershipMintVoucher(context, maybeAccount);
}

export async function safeFetchFanoutMembershipMintVoucher(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipMintVoucher | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeFanoutMembershipMintVoucher(context, maybeAccount)
    : null;
}

export async function fetchAllFanoutMembershipMintVoucher(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<FanoutMembershipMintVoucher[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FanoutMembershipMintVoucher');
    return deserializeFanoutMembershipMintVoucher(context, maybeAccount);
  });
}

export async function safeFetchAllFanoutMembershipMintVoucher(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<FanoutMembershipMintVoucher[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeFanoutMembershipMintVoucher(
        context,
        maybeAccount as RpcAccount
      )
    );
}

export function getFanoutMembershipMintVoucherGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.get('mplHydra').publicKey;
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      fanout: PublicKey;
      fanoutMint: PublicKey;
      lastInflow: number | bigint;
      bumpSeed: number;
    }>([
      ['discriminator', s.array(s.u8, 8)],
      ['fanout', s.publicKey],
      ['fanoutMint', s.publicKey],
      ['lastInflow', s.u64],
      ['bumpSeed', s.u8],
    ])
    .deserializeUsing<FanoutMembershipMintVoucher>((account) =>
      deserializeFanoutMembershipMintVoucher(context, account)
    )
    .whereField('discriminator', [155, 252, 106, 122, 161, 221, 155, 120]);
}

export function deserializeFanoutMembershipMintVoucher(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): FanoutMembershipMintVoucher {
  return deserializeAccount(
    rawAccount,
    getFanoutMembershipMintVoucherAccountDataSerializer(context)
  );
}

export function getFanoutMembershipMintVoucherAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  FanoutMembershipMintVoucherAccountArgs,
  FanoutMembershipMintVoucherAccountData
> {
  const s = context.serializer;
  return mapSerializer<
    FanoutMembershipMintVoucherAccountArgs,
    FanoutMembershipMintVoucherAccountData,
    FanoutMembershipMintVoucherAccountData
  >(
    s.struct<FanoutMembershipMintVoucherAccountData>(
      [
        ['discriminator', s.array(s.u8, 8)],
        ['fanout', s.publicKey],
        ['fanoutMint', s.publicKey],
        ['lastInflow', s.u64],
        ['bumpSeed', s.u8],
      ],
      'FanoutMembershipMintVoucher'
    ),
    (value) =>
      ({
        ...value,
        discriminator: [155, 252, 106, 122, 161, 221, 155, 120],
      } as FanoutMembershipMintVoucherAccountData)
  ) as Serializer<
    FanoutMembershipMintVoucherAccountArgs,
    FanoutMembershipMintVoucherAccountData
  >;
}

export function getFanoutMembershipMintVoucherSize(_context = {}): number {
  return 73;
}
