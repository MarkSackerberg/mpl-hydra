/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type DistributeNftInstructionAccounts = {
  payer?: Signer;
  member: PublicKey;
  membershipMintTokenAccount: PublicKey;
  membershipKey: PublicKey;
  membershipVoucher: PublicKey;
  fanout: PublicKey;
  holdingAccount: PublicKey;
  fanoutForMint: PublicKey;
  fanoutForMintMembershipVoucher: PublicKey;
  fanoutMint: PublicKey;
  fanoutMintMemberTokenAccount: PublicKey;
  systemProgram?: PublicKey;
  rent?: PublicKey;
  tokenProgram?: PublicKey;
};

// Data.
export type DistributeNftInstructionData = {
  discriminator: Array<number>;
  distributeForMint: boolean;
};

export type DistributeNftInstructionDataArgs = { distributeForMint: boolean };

export function getDistributeNftInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<DistributeNftInstructionDataArgs, DistributeNftInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    DistributeNftInstructionDataArgs,
    DistributeNftInstructionData,
    DistributeNftInstructionData
  >(
    s.struct<DistributeNftInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['distributeForMint', s.bool()],
      ],
      { description: 'DistributeNftInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [108, 240, 68, 81, 144, 83, 58, 153],
      } as DistributeNftInstructionData)
  ) as Serializer<
    DistributeNftInstructionDataArgs,
    DistributeNftInstructionData
  >;
}

// Args.
export type DistributeNftInstructionArgs = DistributeNftInstructionDataArgs;

// Instruction.
export function distributeNft(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: DistributeNftInstructionAccounts & DistributeNftInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplHydra',
      'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'rent',
    input.rent ?? publicKey('SysvarRent111111111111111111111111111111111')
  );
  addObjectProperty(
    resolvingAccounts,
    'tokenProgram',
    input.tokenProgram ?? {
      ...context.programs.getPublicKey(
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
      isWritable: false,
    }
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, false),
  });

  // Member.
  keys.push({
    pubkey: resolvedAccounts.member,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.member, true),
  });

  // Membership Mint Token Account.
  keys.push({
    pubkey: resolvedAccounts.membershipMintTokenAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.membershipMintTokenAccount, true),
  });

  // Membership Key.
  keys.push({
    pubkey: resolvedAccounts.membershipKey,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.membershipKey, false),
  });

  // Membership Voucher.
  keys.push({
    pubkey: resolvedAccounts.membershipVoucher,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.membershipVoucher, true),
  });

  // Fanout.
  keys.push({
    pubkey: resolvedAccounts.fanout,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fanout, true),
  });

  // Holding Account.
  keys.push({
    pubkey: resolvedAccounts.holdingAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.holdingAccount, true),
  });

  // Fanout For Mint.
  keys.push({
    pubkey: resolvedAccounts.fanoutForMint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fanoutForMint, true),
  });

  // Fanout For Mint Membership Voucher.
  keys.push({
    pubkey: resolvedAccounts.fanoutForMintMembershipVoucher,
    isSigner: false,
    isWritable: isWritable(
      resolvedAccounts.fanoutForMintMembershipVoucher,
      true
    ),
  });

  // Fanout Mint.
  keys.push({
    pubkey: resolvedAccounts.fanoutMint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fanoutMint, false),
  });

  // Fanout Mint Member Token Account.
  keys.push({
    pubkey: resolvedAccounts.fanoutMintMemberTokenAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fanoutMintMemberTokenAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Rent.
  keys.push({
    pubkey: resolvedAccounts.rent,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.rent, false),
  });

  // Token Program.
  keys.push({
    pubkey: resolvedAccounts.tokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenProgram, false),
  });

  // Data.
  const data =
    getDistributeNftInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
