/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type TransferSharesInstructionAccounts = {
  authority?: Signer;
  fromMember: PublicKey;
  toMember: PublicKey;
  fanout: PublicKey;
  fromMembershipAccount: PublicKey;
  toMembershipAccount: PublicKey;
};

// Data.
export type TransferSharesInstructionData = {
  discriminator: Array<number>;
  shares: bigint;
};

export type TransferSharesInstructionDataArgs = { shares: number | bigint };

export function getTransferSharesInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  TransferSharesInstructionDataArgs,
  TransferSharesInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    TransferSharesInstructionDataArgs,
    TransferSharesInstructionData,
    TransferSharesInstructionData
  >(
    s.struct<TransferSharesInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['shares', s.u64()],
      ],
      { description: 'TransferSharesInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [195, 175, 36, 50, 101, 22, 28, 87],
      } as TransferSharesInstructionData)
  ) as Serializer<
    TransferSharesInstructionDataArgs,
    TransferSharesInstructionData
  >;
}

// Args.
export type TransferSharesInstructionArgs = TransferSharesInstructionDataArgs;

// Instruction.
export function transferShares(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: TransferSharesInstructionAccounts & TransferSharesInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplHydra',
      'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'authority',
    input.authority ?? context.identity
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Authority.
  signers.push(resolvedAccounts.authority);
  keys.push({
    pubkey: resolvedAccounts.authority.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.authority, false),
  });

  // From Member.
  keys.push({
    pubkey: resolvedAccounts.fromMember,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fromMember, false),
  });

  // To Member.
  keys.push({
    pubkey: resolvedAccounts.toMember,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.toMember, false),
  });

  // Fanout.
  keys.push({
    pubkey: resolvedAccounts.fanout,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fanout, true),
  });

  // From Membership Account.
  keys.push({
    pubkey: resolvedAccounts.fromMembershipAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fromMembershipAccount, true),
  });

  // To Membership Account.
  keys.push({
    pubkey: resolvedAccounts.toMembershipAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.toMembershipAccount, true),
  });

  // Data.
  const data =
    getTransferSharesInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
