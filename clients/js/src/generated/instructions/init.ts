/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { findFanoutNativeAccountPda } from '../../hooked';
import { findFanoutPda } from '../accounts';
import { PickPartial, addAccountMeta, addObjectProperty } from '../shared';
import {
  MembershipModel,
  MembershipModelArgs,
  getMembershipModelSerializer,
} from '../types';

// Accounts.
export type InitInstructionAccounts = {
  authority?: Signer;
  fanout?: Pda;
  holdingAccount?: Pda;
  systemProgram?: PublicKey | Pda;
  membershipMint?: PublicKey | Pda;
  rent?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type InitInstructionData = {
  discriminator: Array<number>;
  bumpSeed: number;
  nativeAccountBumpSeed: number;
  name: string;
  totalShares: bigint;
  model: MembershipModel;
};

export type InitInstructionDataArgs = {
  bumpSeed: number;
  nativeAccountBumpSeed: number;
  name: string;
  totalShares: number | bigint;
  model: MembershipModelArgs;
};

export function getInitInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitInstructionDataArgs, InitInstructionData> {
  const s = context.serializer;
  return mapSerializer<InitInstructionDataArgs, any, InitInstructionData>(
    s.struct<InitInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['bumpSeed', s.u8()],
        ['nativeAccountBumpSeed', s.u8()],
        ['name', s.string()],
        ['totalShares', s.u64()],
        ['model', getMembershipModelSerializer(context)],
      ],
      { description: 'InitInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [172, 5, 165, 143, 86, 159, 50, 237],
    })
  ) as Serializer<InitInstructionDataArgs, InitInstructionData>;
}

// Args.
export type InitInstructionArgs = PickPartial<
  InitInstructionDataArgs,
  'bumpSeed' | 'nativeAccountBumpSeed'
>;

// Instruction.
export function init(
  context: Pick<Context, 'serializer' | 'programs' | 'eddsa' | 'identity'>,
  input: InitInstructionAccounts & InitInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );

  // Resolved inputs.
  const resolvedAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'fanout',
    input.fanout
      ? ([input.fanout, true] as const)
      : ([findFanoutPda(context, { name: input.name }), true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'holdingAccount',
    input.holdingAccount
      ? ([input.holdingAccount, true] as const)
      : ([
          findFanoutNativeAccountPda(context, {
            fanout: publicKey(resolvedAccounts.fanout[0], false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'membershipMint',
    input.membershipMint
      ? ([input.membershipMint, true] as const)
      : ([
          publicKey('So11111111111111111111111111111111111111112'),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'bumpSeed',
    input.bumpSeed ?? resolvedAccounts.fanout[0][1]
  );
  addObjectProperty(
    resolvingArgs,
    'nativeAccountBumpSeed',
    input.nativeAccountBumpSeed ?? resolvedAccounts.holdingAccount[0][1]
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.fanout, false);
  addAccountMeta(keys, signers, resolvedAccounts.holdingAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.membershipMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);

  // Data.
  const data =
    getInitInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 557;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
