/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  publicKey,
} from '@metaplex-foundation/umi';
import { findFanoutNativeAccountPda } from '../../hooked';
import { findFanoutPda } from '../accounts';
import {
  MembershipModel,
  MembershipModelArgs,
  getMembershipModelSerializer,
} from '../types';

// Accounts.
export type InitInstructionAccounts = {
  authority?: Signer;
  fanout?: Pda;
  holdingAccount?: Pda;
  systemProgram?: PublicKey;
  membershipMint?: PublicKey;
  rent?: PublicKey;
  tokenProgram?: PublicKey;
};

// Arguments.
export type InitInstructionData = {
  discriminator: Array<number>;
  bumpSeed: number;
  nativeAccountBumpSeed: number;
  name: string;
  totalShares: bigint;
  model: MembershipModel;
};

export type InitInstructionDataArgs = {
  bumpSeed: number;
  nativeAccountBumpSeed: number;
  name: string;
  totalShares: number | bigint;
  model: MembershipModelArgs;
};

export function getInitInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitInstructionDataArgs, InitInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    InitInstructionDataArgs,
    InitInstructionData,
    InitInstructionData
  >(
    s.struct<InitInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['bumpSeed', s.u8()],
        ['nativeAccountBumpSeed', s.u8()],
        ['name', s.string()],
        ['totalShares', s.u64()],
        ['model', getMembershipModelSerializer(context)],
      ],
      { description: 'InitInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [172, 5, 165, 143, 86, 159, 50, 237],
      } as InitInstructionData)
  ) as Serializer<InitInstructionDataArgs, InitInstructionData>;
}

// Instruction.
export function init(
  context: Pick<Context, 'serializer' | 'programs' | 'eddsa' | 'identity'>,
  input: InitInstructionAccounts &
    Omit<InitInstructionDataArgs, 'bumpSeed' | 'nativeAccountBumpSeed'>
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );

  // Resolved accounts.
  const authorityAccount = input.authority ?? context.identity;
  const fanoutAccount =
    input.fanout ?? findFanoutPda(context, { name: input.name });
  const holdingAccountAccount =
    input.holdingAccount ??
    findFanoutNativeAccountPda(context, { fanout: publicKey(fanoutAccount) });
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };
  const membershipMintAccount =
    input.membershipMint ??
    publicKey('So11111111111111111111111111111111111111112');
  const rentAccount =
    input.rent ?? publicKey('SysvarRent111111111111111111111111111111111');
  const tokenProgramAccount = input.tokenProgram ?? {
    ...context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    ),
    isWritable: false,
  };

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, true),
  });

  // Fanout.
  keys.push({
    pubkey: fanoutAccount,
    isSigner: false,
    isWritable: isWritable(fanoutAccount, true),
  });

  // Holding Account.
  keys.push({
    pubkey: holdingAccountAccount,
    isSigner: false,
    isWritable: isWritable(holdingAccountAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Membership Mint.
  keys.push({
    pubkey: membershipMintAccount,
    isSigner: false,
    isWritable: isWritable(membershipMintAccount, true),
  });

  // Rent.
  keys.push({
    pubkey: rentAccount,
    isSigner: false,
    isWritable: isWritable(rentAccount, false),
  });

  // Token Program.
  keys.push({
    pubkey: tokenProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenProgramAccount, false),
  });

  // Data.
  const data = getInitInstructionDataSerializer(context).serialize({
    ...input,
    bumpSeed: fanoutAccount.bump,
    nativeAccountBumpSeed: holdingAccountAccount.bump,
  });

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 557;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
