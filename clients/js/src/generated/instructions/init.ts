/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { findFanoutNativeAccountPda } from '../../hooked';
import { findFanoutPda } from '../accounts';
import { PickPartial, addObjectProperty, isWritable } from '../shared';
import {
  MembershipModel,
  MembershipModelArgs,
  getMembershipModelSerializer,
} from '../types';

// Accounts.
export type InitInstructionAccounts = {
  authority?: Signer;
  fanout?: Pda;
  holdingAccount?: Pda;
  systemProgram?: PublicKey;
  membershipMint?: PublicKey;
  rent?: PublicKey;
  tokenProgram?: PublicKey;
};

// Data.
export type InitInstructionData = {
  discriminator: Array<number>;
  bumpSeed: number;
  nativeAccountBumpSeed: number;
  name: string;
  totalShares: bigint;
  model: MembershipModel;
};

export type InitInstructionDataArgs = {
  bumpSeed: number;
  nativeAccountBumpSeed: number;
  name: string;
  totalShares: number | bigint;
  model: MembershipModelArgs;
};

export function getInitInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitInstructionDataArgs, InitInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    InitInstructionDataArgs,
    InitInstructionData,
    InitInstructionData
  >(
    s.struct<InitInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['bumpSeed', s.u8()],
        ['nativeAccountBumpSeed', s.u8()],
        ['name', s.string()],
        ['totalShares', s.u64()],
        ['model', getMembershipModelSerializer(context)],
      ],
      { description: 'InitInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [172, 5, 165, 143, 86, 159, 50, 237],
      } as InitInstructionData)
  ) as Serializer<InitInstructionDataArgs, InitInstructionData>;
}

// Args.
export type InitInstructionArgs = PickPartial<
  InitInstructionDataArgs,
  'bumpSeed' | 'nativeAccountBumpSeed'
>;

// Instruction.
export function init(
  context: Pick<Context, 'serializer' | 'programs' | 'eddsa' | 'identity'>,
  input: InitInstructionAccounts & InitInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplHydra',
      'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'authority',
    input.authority ?? context.identity
  );
  addObjectProperty(
    resolvingAccounts,
    'fanout',
    input.fanout ?? findFanoutPda(context, { name: input.name })
  );
  addObjectProperty(
    resolvingAccounts,
    'holdingAccount',
    input.holdingAccount ??
      findFanoutNativeAccountPda(context, {
        fanout: publicKey(resolvingAccounts.fanout),
      })
  );
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'membershipMint',
    input.membershipMint ??
      publicKey('So11111111111111111111111111111111111111112')
  );
  addObjectProperty(
    resolvingAccounts,
    'rent',
    input.rent ?? publicKey('SysvarRent111111111111111111111111111111111')
  );
  addObjectProperty(
    resolvingAccounts,
    'tokenProgram',
    input.tokenProgram ?? {
      ...context.programs.getPublicKey(
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingArgs,
    'bumpSeed',
    input.bumpSeed ?? resolvingAccounts.fanout.bump
  );
  addObjectProperty(
    resolvingArgs,
    'nativeAccountBumpSeed',
    input.nativeAccountBumpSeed ?? resolvingAccounts.holdingAccount.bump
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Authority.
  signers.push(resolvedAccounts.authority);
  keys.push({
    pubkey: resolvedAccounts.authority.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.authority, true),
  });

  // Fanout.
  keys.push({
    pubkey: resolvedAccounts.fanout,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fanout, true),
  });

  // Holding Account.
  keys.push({
    pubkey: resolvedAccounts.holdingAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.holdingAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Membership Mint.
  keys.push({
    pubkey: resolvedAccounts.membershipMint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.membershipMint, true),
  });

  // Rent.
  keys.push({
    pubkey: resolvedAccounts.rent,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.rent, false),
  });

  // Token Program.
  keys.push({
    pubkey: resolvedAccounts.tokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenProgram, false),
  });

  // Data.
  const data =
    getInitInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 557;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
