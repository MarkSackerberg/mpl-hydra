/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type InitForMintInstructionAccounts = {
  authority?: Signer;
  fanout: PublicKey;
  fanoutForMint: PublicKey;
  mintHoldingAccount: PublicKey;
  mint: PublicKey;
  systemProgram?: PublicKey;
  rent?: PublicKey;
};

// Data.
export type InitForMintInstructionData = {
  discriminator: Array<number>;
  bumpSeed: number;
};

export type InitForMintInstructionDataArgs = { bumpSeed: number };

export function getInitForMintInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitForMintInstructionDataArgs, InitForMintInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    InitForMintInstructionDataArgs,
    InitForMintInstructionData,
    InitForMintInstructionData
  >(
    s.struct<InitForMintInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['bumpSeed', s.u8()],
      ],
      { description: 'InitForMintInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [140, 150, 232, 195, 93, 219, 35, 170],
      } as InitForMintInstructionData)
  ) as Serializer<InitForMintInstructionDataArgs, InitForMintInstructionData>;
}

// Args.
export type InitForMintInstructionArgs = InitForMintInstructionDataArgs;

// Instruction.
export function initForMint(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: InitForMintInstructionAccounts & InitForMintInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplHydra',
      'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'authority',
    input.authority ?? context.identity
  );
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'rent',
    input.rent ?? publicKey('SysvarRent111111111111111111111111111111111')
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Authority.
  signers.push(resolvedAccounts.authority);
  keys.push({
    pubkey: resolvedAccounts.authority.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.authority, true),
  });

  // Fanout.
  keys.push({
    pubkey: resolvedAccounts.fanout,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fanout, true),
  });

  // Fanout For Mint.
  keys.push({
    pubkey: resolvedAccounts.fanoutForMint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.fanoutForMint, true),
  });

  // Mint Holding Account.
  keys.push({
    pubkey: resolvedAccounts.mintHoldingAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.mintHoldingAccount, true),
  });

  // Mint.
  keys.push({
    pubkey: resolvedAccounts.mint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.mint, false),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Rent.
  keys.push({
    pubkey: resolvedAccounts.rent,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.rent, false),
  });

  // Data.
  const data =
    getInitForMintInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
