/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  publicKey,
} from '@metaplex-foundation/umi-core';

// Accounts.
export type InitForMintInstructionAccounts = {
  authority?: Signer;
  fanout: PublicKey;
  fanoutForMint: PublicKey;
  mintHoldingAccount: PublicKey;
  mint: PublicKey;
  systemProgram?: PublicKey;
  rent?: PublicKey;
};

// Arguments.
export type InitForMintInstructionData = {
  discriminator: Array<number>;
  bumpSeed: number;
};

export type InitForMintInstructionDataArgs = { bumpSeed: number };

export function getInitForMintInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitForMintInstructionDataArgs, InitForMintInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    InitForMintInstructionDataArgs,
    InitForMintInstructionData,
    InitForMintInstructionData
  >(
    s.struct<InitForMintInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['bumpSeed', s.u8()],
      ],
      { description: 'InitForMintInstructionArgs' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [140, 150, 232, 195, 93, 219, 35, 170],
      } as InitForMintInstructionData)
  ) as Serializer<InitForMintInstructionDataArgs, InitForMintInstructionData>;
}

// Instruction.
export function initForMint(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: InitForMintInstructionAccounts & InitForMintInstructionDataArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = context.programs.get('mplHydra').publicKey;

  // Resolved accounts.
  const authorityAccount = input.authority ?? context.identity;
  const fanoutAccount = input.fanout;
  const fanoutForMintAccount = input.fanoutForMint;
  const mintHoldingAccountAccount = input.mintHoldingAccount;
  const mintAccount = input.mint;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.get('splSystem').publicKey,
    isWritable: false,
  };
  const rentAccount =
    input.rent ?? publicKey('SysvarRent111111111111111111111111111111111');

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, true),
  });

  // Fanout.
  keys.push({
    pubkey: fanoutAccount,
    isSigner: false,
    isWritable: isWritable(fanoutAccount, true),
  });

  // Fanout For Mint.
  keys.push({
    pubkey: fanoutForMintAccount,
    isSigner: false,
    isWritable: isWritable(fanoutForMintAccount, true),
  });

  // Mint Holding Account.
  keys.push({
    pubkey: mintHoldingAccountAccount,
    isSigner: false,
    isWritable: isWritable(mintHoldingAccountAccount, true),
  });

  // Mint.
  keys.push({
    pubkey: mintAccount,
    isSigner: false,
    isWritable: isWritable(mintAccount, false),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Rent.
  keys.push({
    pubkey: rentAccount,
    isSigner: false,
    isWritable: isWritable(rentAccount, false),
  });

  // Data.
  const data =
    getInitForMintInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
