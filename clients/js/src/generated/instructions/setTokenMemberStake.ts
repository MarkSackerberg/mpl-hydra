/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type SetTokenMemberStakeInstructionAccounts = {
  member: Signer;
  fanout: PublicKey | Pda;
  membershipVoucher: PublicKey | Pda;
  membershipMint: PublicKey | Pda;
  membershipMintTokenAccount: PublicKey | Pda;
  memberStakeAccount: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type SetTokenMemberStakeInstructionData = {
  discriminator: Array<number>;
  shares: bigint;
};

export type SetTokenMemberStakeInstructionDataArgs = {
  shares: number | bigint;
};

export function getSetTokenMemberStakeInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  SetTokenMemberStakeInstructionDataArgs,
  SetTokenMemberStakeInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    SetTokenMemberStakeInstructionDataArgs,
    any,
    SetTokenMemberStakeInstructionData
  >(
    s.struct<SetTokenMemberStakeInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['shares', s.u64()],
      ],
      { description: 'SetTokenMemberStakeInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [167, 29, 12, 30, 44, 193, 249, 142],
    })
  ) as Serializer<
    SetTokenMemberStakeInstructionDataArgs,
    SetTokenMemberStakeInstructionData
  >;
}

// Args.
export type SetTokenMemberStakeInstructionArgs =
  SetTokenMemberStakeInstructionDataArgs;

// Instruction.
export function setTokenMemberStake(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: SetTokenMemberStakeInstructionAccounts &
    SetTokenMemberStakeInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    member: [input.member, true] as const,
    fanout: [input.fanout, true] as const,
    membershipVoucher: [input.membershipVoucher, true] as const,
    membershipMint: [input.membershipMint, true] as const,
    membershipMintTokenAccount: [
      input.membershipMintTokenAccount,
      true,
    ] as const,
    memberStakeAccount: [input.memberStakeAccount, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.member, false);
  addAccountMeta(keys, signers, resolvedAccounts.fanout, false);
  addAccountMeta(keys, signers, resolvedAccounts.membershipVoucher, false);
  addAccountMeta(keys, signers, resolvedAccounts.membershipMint, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.membershipMintTokenAccount,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.memberStakeAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);

  // Data.
  const data =
    getSetTokenMemberStakeInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
