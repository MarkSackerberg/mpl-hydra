/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type RemoveMemberInstructionAccounts = {
  authority?: Signer;
  member: PublicKey | Pda;
  fanout: PublicKey | Pda;
  membershipAccount: PublicKey | Pda;
  destination: PublicKey | Pda;
};

// Data.
export type RemoveMemberInstructionData = { discriminator: Array<number> };

export type RemoveMemberInstructionDataArgs = {};

export function getRemoveMemberInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<RemoveMemberInstructionDataArgs, RemoveMemberInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    RemoveMemberInstructionDataArgs,
    any,
    RemoveMemberInstructionData
  >(
    s.struct<RemoveMemberInstructionData>(
      [['discriminator', s.array(s.u8(), { size: 8 })]],
      { description: 'RemoveMemberInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [9, 45, 36, 163, 245, 40, 150, 85] })
  ) as Serializer<RemoveMemberInstructionDataArgs, RemoveMemberInstructionData>;
}

// Instruction.
export function removeMember(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: RemoveMemberInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    member: [input.member, false] as const,
    fanout: [input.fanout, true] as const,
    membershipAccount: [input.membershipAccount, true] as const,
    destination: [input.destination, true] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.member, false);
  addAccountMeta(keys, signers, resolvedAccounts.fanout, false);
  addAccountMeta(keys, signers, resolvedAccounts.membershipAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.destination, false);

  // Data.
  const data = getRemoveMemberInstructionDataSerializer(context).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
