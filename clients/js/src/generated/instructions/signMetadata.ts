/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@metaplex-foundation/umi-core';

// Accounts.
export type SignMetadataInstructionAccounts = {
  authority?: Signer;
  fanout: PublicKey;
  holdingAccount: PublicKey;
  metadata: PublicKey;
  tokenMetadataProgram: PublicKey;
};

// Arguments.
export type SignMetadataInstructionData = { discriminator: Array<number> };

export type SignMetadataInstructionArgs = {};

export function getSignMetadataInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<SignMetadataInstructionArgs, SignMetadataInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    SignMetadataInstructionArgs,
    SignMetadataInstructionData,
    SignMetadataInstructionData
  >(
    s.struct<SignMetadataInstructionData>(
      [['discriminator', s.array(s.u8, 8)]],
      'SignMetadataInstructionArgs'
    ),
    (value) =>
      ({
        ...value,
        discriminator: [188, 67, 163, 49, 0, 150, 63, 89],
      } as SignMetadataInstructionData)
  ) as Serializer<SignMetadataInstructionArgs, SignMetadataInstructionData>;
}

// Instruction.
export function signMetadata(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: SignMetadataInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = context.programs.get('mplHydra').publicKey;

  // Resolved accounts.
  const authorityAccount = input.authority ?? context.identity;
  const fanoutAccount = input.fanout;
  const holdingAccountAccount = input.holdingAccount;
  const metadataAccount = input.metadata;
  const tokenMetadataProgramAccount = input.tokenMetadataProgram;

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, true),
  });

  // Fanout.
  keys.push({
    pubkey: fanoutAccount,
    isSigner: false,
    isWritable: isWritable(fanoutAccount, false),
  });

  // Holding Account.
  keys.push({
    pubkey: holdingAccountAccount,
    isSigner: false,
    isWritable: isWritable(holdingAccountAccount, false),
  });

  // Metadata.
  keys.push({
    pubkey: metadataAccount,
    isSigner: false,
    isWritable: isWritable(metadataAccount, true),
  });

  // Token Metadata Program.
  keys.push({
    pubkey: tokenMetadataProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenMetadataProgramAccount, false),
  });

  // Data.
  const data = getSignMetadataInstructionDataSerializer(context).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
